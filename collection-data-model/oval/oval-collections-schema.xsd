<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:oval="http://oval.cisecurity.org/XMLSchema/oval-common-6"
            xmlns:oval-coll="http://oval.cisecurity.org/XMLSchema/oval-collections-6"
            xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
            targetNamespace="http://oval.cisecurity.org/XMLSchema/oval-collections-6"
            elementFormDefault="qualified" version="6.0.0">
    <xsd:import namespace="http://oval.cisecurity.org/XMLSchema/oval-common-6" schemaLocation="oval-common-schema.xsd"/>
    <xsd:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="xmldsig-core-schema.xsd"/>

    <!-- =============================================================================== -->
    <!-- ======================== Root OVAL objects Element ======================== -->
    <!-- =============================================================================== -->
    <xsd:element name="oval_objects">
        <xsd:annotation>
            <xsd:documentation>
                The sacm_objects element is the root of an SACM object Document. Its purpose is to bind together the major sections 
                of a document - generator, objects, filters, and variables - which are the children of the root element.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="generator" type="oval:GeneratorType">
                    <xsd:annotation>
                        <xsd:documentation>The required generator section provides information about when the definition file was compiled and under what version.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Objects" type="oval-coll:ObjectsType" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>The optional objects section contains 1 or more objects.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="filters" type="oval-coll:FiltersType" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>The optional states section contains 1 or more filters.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="variables" type="oval:VariablesType" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>The optional variables section contains 1 or more variables.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element ref="ds:Signature" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>The optional Signature element allows an XML Signature as defined by the W3C to be attached to the document. This allows authentication and data integrity to be provided to the user. Enveloped signatures are supported. More information about the official W3C Recommendation regarding XML digital signatures can be found at http://www.w3.org/TR/xmldsig-core/.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
        <xsd:key name="ObjectKey">
            <xsd:annotation>
                <xsd:documentation>Enforce uniqueness amongst the ids differentiating the individual object elements.</xsd:documentation>
            </xsd:annotation>
            <xsd:selector xpath="oval-coll:Objects/*"/>
            <xsd:field xpath="@id"/>
        </xsd:key>
        <xsd:key name="filterKey">
            <xsd:annotation>
                <xsd:documentation>Enforce uniqueness amongst the ids differentiating the individual filter elements.</xsd:documentation>
            </xsd:annotation>
            <xsd:selector xpath="oval-coll:filters/*"/>
            <xsd:field xpath="@id"/>
        </xsd:key>
        <xsd:key name="variableKey">
            <xsd:annotation>
                <xsd:documentation>Enforce uniqueness amongst the ids differentiating the individual variable elements.</xsd:documentation>
            </xsd:annotation>
            <xsd:selector xpath="oval:variables/*"/>
            <xsd:field xpath="@id"/>
        </xsd:key>
        <xsd:keyref name="ObjectKeyRef" refer="oval-coll:ObjectKey">
            <xsd:annotation>
                <xsd:documentation>Requires each object reference to refer to a valid object id.</xsd:documentation>
            </xsd:annotation>
            <xsd:selector xpath=".//*"/>
            <xsd:field xpath="@object_ref"/>
        </xsd:keyref>
        <xsd:keyref name="filterKeyRef" refer="oval-coll:filterKey">
            <xsd:annotation>
                <xsd:documentation>Requires each filter reference to refer to a valid filter id.</xsd:documentation>
            </xsd:annotation>
            <xsd:selector xpath=".//*"/>
            <xsd:field xpath="@filter_ref"/>
        </xsd:keyref>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- ==================================  OBJECTS  ================================== -->
    <!-- =============================================================================== -->
    <xsd:complexType name="ObjectsType">
        <xsd:annotation>
            <xsd:documentation>The ObjectsType complex type is a container for one or more object child elements. Each object element provides details that define a unique set of matching items to be used by an OVAL Test. Please refer to the description of the object element for more information about an individual object.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="oval-coll:object" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="object" type="oval-coll:ObjectType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>The object element is an abstract element that is meant to be extended (via substitution groups) by the objects found in the component schemas. An actual object element is not valid. The use of this abstract element simplifies the OVAL schema by allowing individual objects to inherit any common elements and attributes from the base ObjectType.  Please refer to the description of the ObjectType complex type for more information.</xsd:documentation>
            <xsd:documentation>An object is used to identify a set of items to collect.  The author of a schema object must define sufficient object entities to allow a user to identify a unique item to be collected.</xsd:documentation>
            <xsd:documentation>A simple object typically results in a single file, process, etc being identified.  But through the use of pattern matches, sets, and variables, multiple matching items can be identified.  The set of items matching the object can then be used by an OVAL test and compared against an OVAL state.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="ObjectType">
        <xsd:annotation>
            <xsd:documentation>The base type of every object includes an optional notes element. The notes element of an object should be used to hold information that might be helpful to someone examining the technical aspects of the object. For example, why certain values have been used, or maybe a link to where further information can be found. Please refer to the description of the NotesType complex type for more information about the notes element.</xsd:documentation>
            <xsd:documentation>The required id attribute uniquely identifies each object, and must conform to the format specified by the ObjectIdPattern simple type. The required version attribute holds the current version of the object element. Versions are integers, starting at 1 and incrementing every time an object is modified. The optional comment attribute provides a short description of the object. The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="ds:Signature" minOccurs="0" maxOccurs="1"/>
            <xsd:element ref="oval:notes" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="oval:ObjectIDPattern" use="required"/>
        <xsd:attribute name="version" type="xsd:nonNegativeInteger" use="required"/>
        <xsd:attribute name="comment" type="oval:NonEmptyStringType" use="optional"/>
        <xsd:attribute name="deprecated" type="xsd:boolean" use="optional" default="false"/>
    </xsd:complexType>
    <xsd:element name="set">
        <xsd:annotation>
            <xsd:documentation>The set element enables complex objects to be described. It is a recursive element in that each set element can contain additional set elements as children. Each set element defines characteristics that produce a matching unique set of items. This set of items is defined by one or two references to OVAL Objects that provide the criteria needed to collect a set of system items. These items can have one or more filters applied to allow a subset of those items to be specifically included or excluded from the overall set of items.</xsd:documentation>
            <xsd:documentation>The set element's object_reference refers to an existing OVAL Object. The set element's filter element provides a reference to an existing OVAL State and includes an optional action attribute. The filter's action attribute allows the author to specify whether matching items should be included or excluded from the overall set. The default filter action is to exclude all matching items. In other words, the filter can be thought of filtering items out by default.</xsd:documentation>
            <xsd:documentation>Each filter is applied to the items identified by each OVAL Object before the set_operator is applied. For example, if an object_reference points to an OVAL Object that identifies every file in a certain directory, a filter might be set up to limit the object set to only those files with a size less than 10 KB. If multiple filters are provided, then each filter is applied to the set of items identified by the OVAL Object. Care must be taken to ensure that conflicting filters are not applied. It is possible to exclude all items with a size of 10 KB and then include only items with a size of 10 KB. This example would result in the empty set.</xsd:documentation>
            <xsd:documentation>The required set_operator attribute defines how different child sets are combined to form the overall unique set of objects. For example, does one take the union of different sets or the intersection? For a description of the valid values please refer to the SetOperatorEnumeration simple type.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:choice>
                <xsd:sequence>
                    <xsd:element ref="oval-coll:set" minOccurs="1" maxOccurs="2"/>
                </xsd:sequence>
                <xsd:sequence>
                    <xsd:element name="Object_reference" type="oval:ObjectIDPattern" minOccurs="1" maxOccurs="2"/>
                    <xsd:element ref="oval-coll:filter" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:choice>
            <xsd:attribute name="set_operator" type="oval-coll:SetOperatorEnumeration" use="optional" default="UNION"/>
        </xsd:complexType>
    </xsd:element>

    <!-- =============================================================================== -->
    <!-- ==================================  FILTERS  ================================== -->
    <!-- =============================================================================== -->
    <xsd:complexType name="FiltersType">
        <xsd:annotation>
            <xsd:documentation>
                The FiltersType complex type is a container for one or more filter child elements. Each filter element provides details that 
                define filtering criteria for an OVAL object. Please refer to the description of the filter element for 
                more information about an individual filter.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="oval-coll:filter" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:complexType name="FilterType">
        <xsd:annotation>
            <xsd:documentation>The base type of every filter includes an optional notes element. The notes element of a filter should be used to hold information that might be helpful to someone examining the technical aspects of the filter. For example, why certain values have been used, or maybe a link to where further information can be found. Please refer to the description of the NotesType complex type for more information about the notes element.</xsd:documentation>
            <xsd:documentation>The required id attribute uniquely identifies each object, and must conform to the format specified by the ObjectIdPattern simple type. The required version attribute holds the current version of the object element. Versions are integers, starting at 1 and incrementing every time an object is modified. The optional comment attribute provides a short description of the object. The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="ds:Signature" minOccurs="0" maxOccurs="1"/>
            <xsd:element ref="oval:notes" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="oval:FilterIDPattern" use="required"/>
        <xsd:attribute name="version" type="xsd:nonNegativeInteger" use="required"/>
        <xsd:attribute name="comment" type="oval:NonEmptyStringType" use="optional"/>
        <xsd:attribute name="deprecated" type="xsd:boolean" use="optional" default="false"/>
        <xsd:attribute name="action" type="oval-coll:FilterActionEnumeration" use="optional" default="exclude"/>
    </xsd:complexType>
    <xsd:element name="filter" type="oval-coll:FilterType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                The filter element provides a reference to an existing OVAL Filter and includes an optional action attribute. The action 
                attribute is used to specify whether items that match the referenced OVAL State will be included in the resulting set or 
                excluded from the resulting set.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- ===============================  ENUMERATIONS  ================================ -->
    <!-- =============================================================================== -->
    <xsd:simpleType name="FilterActionEnumeration">
        <xsd:annotation>
            <xsd:documentation>The FilterActionEnumeration simple type defines the different options for filtering sets of items.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="exclude">
                <xsd:annotation>
                    <xsd:documentation>The exclude value specifies that all items that match the filter shall be excluded from set that the filter is applied to.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="include">
                <xsd:annotation>
                    <xsd:documentation>The include value specifies that only items that match the filter shall be included in the set that the filter is applied to.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="SetOperatorEnumeration">
        <xsd:annotation>
            <xsd:documentation>The SetOperatorEnumeration simple type defines acceptable set operations. Set operations are used to take multiple different sets of objects within OVAL and merge them into a single unique set. The different operators that guide this merge are defined below. For each operator, if only a single object has been supplied, then the resulting set is simply that complete object.</xsd:documentation>
            <xsd:appinfo>
                <evaluation_documentation>Below are some tables that outline how different flags are combined with a given set_operator to return a new flag. These tables are needed when computing the flag for collected objects that represent object sets in an OVAL Definition. The top row identifies the flag associated with the first set or object reference. The left column identifies the flag associated with the second set or object reference. The matrix inside the table represent the resulting flag when the given set_operator is applied. (E=error, C=complete, I=incomplete, DNE=does not exist, NC=not collected, NA=not applicable)</evaluation_documentation>
                <evaluation_chart xml:space="preserve">
                 ||                                   ||
 set_operator is ||            obj 1 flag             || 
      union      ||                                   ||
                 ||  E  |  C  |  I  | DNE | NC  | NA  ||
-----------------||-----------------------------------||
               E ||  E  |  E  |  E  |  E  |  E  |  E  || 
  obj          C ||  E  |  C  |  I  |  C  |  I  |  C  ||
   2           I ||  E  |  I  |  I  |  I  |  I  |  I  || 
  flag       DNE ||  E  |  C  |  I  | DNE |  I  | DNE ||
              NC ||  E  |  I  |  I  |  I  |  NC |  NC || 
              NA ||  E  |  C  |  I  | DNE |  NC |  NA ||
-----------------||-----------------------------------||
                      </evaluation_chart>
                <evaluation_chart xml:space="preserve">
                 ||                                   ||
 set_operator is ||             obj 1 flag            ||
  intersection   ||                                   ||
                 ||  E  |  C  |  I  | DNE | NC  | NA  ||
-----------------||-----------------------------------||
               E ||  E  |  E  |  E  | DNE |  E  |  E  ||
   obj         C ||  E  |  C  |  I  | DNE |  NC |  C  ||
    2          I ||  E  |  I  |  I  | DNE |  NC |  I  ||
   flag      DNE || DNE | DNE | DNE | DNE | DNE | DNE ||
              NC ||  E  |  NC |  NC | DNE |  NC |  NC ||
              NA ||  E  |  C  |  I  | DNE |  NC |  NA ||
-----------------||-----------------------------------||
                      </evaluation_chart>
                <evaluation_chart xml:space="preserve">
                 ||                                   ||
 set_operator is ||             obj 1 flag            ||
    complement   ||                                   ||
                 ||  E  |  C  |  I  | DNE | NC  | NA  ||
-----------------||-----------------------------------||
               E ||  E  |  E  |  E  | DNE |  E  |  E  ||
   obj         C ||  E  |  C  |  I  | DNE |  NC |  E  ||
    2          I ||  E  |  E  |  E  | DNE |  NC |  E  ||
   flag      DNE ||  E  |  C  |  I  | DNE |  NC |  E  ||
              NC ||  E  |  NC |  NC | DNE |  NC |  E  ||
              NA ||  E  |  E  |  E  |  E  |  E  |  E  ||
-----------------||-----------------------------------||
                      </evaluation_chart>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="COMPLEMENT">
                <xsd:annotation>
                    <xsd:documentation>The complement operator is defined in OVAL as a relative complement. The resulting unique set contains everything that belongs to the first declared set that is not part of the second declared set. If A and B are sets (with A being the first declared set), then the relative complement is the set of elements in A, but not in B, with the duplicates removed.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="INTERSECTION">
                <xsd:annotation>
                    <xsd:documentation>The intersection of two sets in OVAL results in a unique set that contains everything that belongs to both sets in the object, but nothing else. If A and B are sets, then the intersection of A and B contains all the elements of A that also belong to B, but no other elements, with the duplicates removed.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="UNION">
                <xsd:annotation>
                    <xsd:documentation>The union of two sets in OVAL results in a unique set that contains everything that belongs to either of the original sets. If A and B are sets, then the union of A and B contains all the elements of A and all elements of B, with the duplicates removed.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>
    
    <!-- =============================================================================== -->
    <!-- ===============================  ENTITY TYPES  ================================ -->
    <!-- =============================================================================== -->
    <xsd:complexType name="ObjectIPAddressType">
        <xsd:annotation>
            <xsd:documentation>The objectIPAddressType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any IPv4/IPv6 address or address prefix.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" use="required">
                    <xsd:simpleType>
                        <xsd:restriction base="oval:SimpleDatatypeEnumeration">
                            <xsd:enumeration value="ipv4_address"/>
                            <xsd:enumeration value="ipv6_address"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectIPAddressStringType">
        <xsd:annotation>
            <xsd:documentation>The objectIPAddressStringType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any IPv4/IPv6 address, address prefix, or its string representation.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" use="optional" default="string">
                    <xsd:simpleType>
                        <xsd:restriction base="oval:SimpleDatatypeEnumeration">
                            <xsd:enumeration value="ipv4_address"/>
                            <xsd:enumeration value="ipv6_address"/>
                            <xsd:enumeration value="string"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectAnySimpleType">
        <xsd:annotation>
            <xsd:documentation>The objectAnySimpleType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any simple data.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="optional" default="string"/>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectBinaryType">
        <xsd:annotation>
            <xsd:documentation>The EntityBinaryType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple binary data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:hexBinary oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="binary"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectBoolType">
        <xsd:annotation>
            <xsd:documentation>The EntityBoolType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple boolean data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:boolean oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="boolean"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectFloatType">
        <xsd:annotation>
            <xsd:documentation>The objectFloatType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple float data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:float oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="float"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectIntType">
        <xsd:annotation>
            <xsd:documentation>The EntityIntType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple integer data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:integer oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="int"/>                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStringType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple string data.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="optional" fixed="string"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectVersionType">
        <xsd:annotation>
            <xsd:documentation>The objectVersionType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple version data.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="version"/>                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="ObjectRecordType">
        <xsd:annotation>
            <xsd:documentation>The objectRecordType defines an entity that consists of a number of uniquely named fields. This structure is used for representing a record from a database query and other similar structures where multiple related fields must be represented at once. Note that for all entities of this type, the only allowed datatype is 'record' and the only allowed operation is 'equals'. During analysis of a system characteristics item, each field is analyzed and then the overall result for elements of this type is computed by logically anding the results for each field and then applying the entity_check attribute.</xsd:documentation>
            <xsd:documentation>Note the datatype attribute must be set to 'record'.</xsd:documentation>
            <!-- 
                NOTE: The restriction that the only allowed datatype is 'record' is enforced by scheamtron rules placed on each entity that uses this type. 
                This is due to the fact that this type is developed as an extension of the oval-def:EntityComplexBaseType. This base type declares a datatype attribute. to restrict the 
                datatype attribute to only alloy 'record' would need a restriction. We cannot do both and xsd:extension and an xsd:restriction at the same time.
             -->
            <xsd:documentation>Note the operation attribute must be set to 'equals'.</xsd:documentation>
            <xsd:documentation>Note the var_ref attribute is not permitted and the var_check attribute does not apply.</xsd:documentation>
            <xsd:documentation>Note that when the mask attribute is set to 'true', all child field elements must be masked regardless of the child field's mask attribute value.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="oval:EntityComplexBaseType">
                <xsd:sequence>
                    <xsd:element name="field" type="oval-coll:ObjectFieldType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType> 
    <xsd:complexType name="ObjectFieldType">
        <xsd:annotation>
            <xsd:documentation>The objectFieldType defines an element with simple content that represents a named field in a record that may contain any number of named fields. The objectFieldType is much like all other entities with one significant difference, the objectFieldType has a name attribute</xsd:documentation>
            <xsd:documentation>The required name attribute specifies a unique name for the field. Field names are lowercase and must be unique within a given parent record element. When analyzing system characteristics an error should be reported for the result of a field that is present in the OVAL State, but not found in the system characteristics Item.</xsd:documentation>
            <xsd:documentation>The optional entity_check attribute specifies how to handle multiple record fields with the same name in the OVAL Systems Characteristics file. For example, while collecting group information where one field is the represents the users that are members of the group.  It is very likely that there will be multiple fields with a name of 'user' associated with the group.  If the OVAL State defines the value of the field with name equal 'user' to equal 'Fred', then the entity_check attribute determines if all values for field entities must be equal to 'Fred', or at least one value must be equal to 'Fred', etc.</xsd:documentation>
            <xsd:documentation>Note that when the mask attribute is set to 'true' on a field's parent element the field must be masked regardless of the field's mask attribute value.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:anySimpleType">
                <xsd:attribute name="name" use="required">
                    <xsd:annotation>
                        <xsd:documentation>A string restricted to disallow upper case characters.</xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:pattern value="[^A-Z]+"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attributeGroup ref="oval:EntityAttributeGroup"/>
                <xsd:attribute name="entity_check" type="oval:CheckEnumeration" use="optional" default="all"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="FilterIPAddressType">
        <xsd:annotation>
            <xsd:documentation>The objectIPAddressType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any IPv4/IPv6 address or address prefix.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" use="required">
                    <xsd:simpleType>
                        <xsd:restriction base="oval:SimpleDatatypeEnumeration">
                            <xsd:enumeration value="ipv4_address"/>
                            <xsd:enumeration value="ipv6_address"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterIPAddressStringType">
        <xsd:annotation>
            <xsd:documentation>The objectIPAddressStringType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any IPv4/IPv6 address, address prefix, or its string representation.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" use="optional" default="string">
                    <xsd:simpleType>
                        <xsd:restriction base="oval:SimpleDatatypeEnumeration">
                            <xsd:enumeration value="ipv4_address"/>
                            <xsd:enumeration value="ipv6_address"/>
                            <xsd:enumeration value="string"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterAnySimpleType">
        <xsd:annotation>
            <xsd:documentation>The objectAnySimpleType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any simple data.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="optional" default="string"/>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterBinaryType">
        <xsd:annotation>
            <xsd:documentation>The EntityBinaryType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple binary data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:hexBinary oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="binary"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterBoolType">
        <xsd:annotation>
            <xsd:documentation>The EntityBoolType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple boolean data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:boolean oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="boolean"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterFloatType">
        <xsd:annotation>
            <xsd:documentation>The objectFloatType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple float data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:float oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="float"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterIntType">
        <xsd:annotation>
            <xsd:documentation>The EntityIntType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple integer data. The empty string is also allowed when using a variable reference with an element.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:union memberTypes="xsd:integer oval:EmptyStringType"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="int"/>                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStringType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple string data.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="optional" fixed="string"/>                                                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterVersionType">
        <xsd:annotation>
            <xsd:documentation>The objectVersionType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple version data.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval:EntitySimpleBaseType">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string"/>
                </xsd:simpleType>
                <xsd:attribute name="datatype" type="oval:SimpleDatatypeEnumeration" use="required" fixed="version"/>                
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="FilterRecordType">
        <xsd:annotation>
            <xsd:documentation>The objectRecordType defines an entity that consists of a number of uniquely named fields. This structure is used for representing a record from a database query and other similar structures where multiple related fields must be represented at once. Note that for all entities of this type, the only allowed datatype is 'record' and the only allowed operation is 'equals'. During analysis of a system characteristics item, each field is analyzed and then the overall result for elements of this type is computed by logically anding the results for each field and then applying the entity_check attribute.</xsd:documentation>
            <xsd:documentation>Note the datatype attribute must be set to 'record'.</xsd:documentation>
            <!-- 
                NOTE: The restriction that the only allowed datatype is 'record' is enforced by scheamtron rules placed on each entity that uses this type. 
                This is due to the fact that this type is developed as an extension of the oval-def:EntityComplexBaseType. This base type declares a datatype attribute. to restrict the 
                datatype attribute to only alloy 'record' would need a restriction. We cannot do both and xsd:extension and an xsd:restriction at the same time.
             -->
            <xsd:documentation>Note the operation attribute must be set to 'equals'.</xsd:documentation>
            <xsd:documentation>Note the var_ref attribute is not permitted and the var_check attribute does not apply.</xsd:documentation>
            <xsd:documentation>Note that when the mask attribute is set to 'true', all child field elements must be masked regardless of the child field's mask attribute value.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="oval:EntityComplexBaseType">
                <xsd:sequence>
                    <xsd:element name="field" type="oval-coll:FilterFieldType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType> 
    <xsd:complexType name="FilterFieldType">
        <xsd:annotation>
            <xsd:documentation>The objectFieldType defines an element with simple content that represents a named field in a record that may contain any number of named fields. The objectFieldType is much like all other entities with one significant difference, the objectFieldType has a name attribute</xsd:documentation>
            <xsd:documentation>The required name attribute specifies a unique name for the field. Field names are lowercase and must be unique within a given parent record element. When analyzing system characteristics an error should be reported for the result of a field that is present in the OVAL State, but not found in the system characteristics Item.</xsd:documentation>
            <xsd:documentation>The optional entity_check attribute specifies how to handle multiple record fields with the same name in the OVAL Systems Characteristics file. For example, while collecting group information where one field is the represents the users that are members of the group.  It is very likely that there will be multiple fields with a name of 'user' associated with the group.  If the OVAL State defines the value of the field with name equal 'user' to equal 'Fred', then the entity_check attribute determines if all values for field entities must be equal to 'Fred', or at least one value must be equal to 'Fred', etc.</xsd:documentation>
            <xsd:documentation>Note that when the mask attribute is set to 'true' on a field's parent element the field must be masked regardless of the field's mask attribute value.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:anySimpleType">
                <xsd:attribute name="name" use="required">
                    <xsd:annotation>
                        <xsd:documentation>A string restricted to disallow upper case characters.</xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:pattern value="[^A-Z]+"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attributeGroup ref="oval:EntityAttributeGroup"/>
                <xsd:attribute name="entity_check" type="oval:CheckEnumeration" use="optional" default="all"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:schema>
