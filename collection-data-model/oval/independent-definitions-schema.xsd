<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:oval="http://oval.cisecurity.org/XMLSchema/oval-common-6"
            xmlns:oval-def="http://oval.cisecurity.org/XMLSchema/oval-definitions-6"
            xmlns:ind-def="http://oval.cisecurity.org/XMLSchema/oval-definitions-6#independent"
            xmlns:sch="http://purl.oclc.org/dsdl/schematron"
            targetNamespace="http://oval.cisecurity.org/XMLSchema/oval-definitions-6#independent"
            elementFormDefault="qualified" version="6.0.0">
      <xsd:import namespace="http://oval.cisecurity.org/XMLSchema/oval-common-6" schemaLocation="oval-common-schema.xsd"/>
      <xsd:import namespace="http://oval.cisecurity.org/XMLSchema/oval-definitions-6" schemaLocation="oval-definitions-schema.xsd"/>
      <xsd:annotation>
            <xsd:documentation>
                  The following is a description of the elements, types, and attributes that compose the tests found in Open Vulnerability and Assessment 
                  Language (OVAL) that are independent of a specific piece of software. Each test is described in detail and should provide the information 
                  necessary to understand what each element and attribute represents. This document is intended for developers and assumes some familiarity 
                  with XML. A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is 
                  not outlined here.
            </xsd:documentation>
            <xsd:documentation>
                  The OVAL Schema is maintained by the OVAL Community. For more information, including how to get involved in the project and how to submit 
                  change requests, please visit the OVAL website at http://oval.cisecurity.org.
            </xsd:documentation>
            <xsd:appinfo>
                  <schema>Independent Definition</schema>
                  <version>6.0.0</version>
                  <date>07/10/2019 09:00:00 AM</date>
                  <terms_of_use>
                        For the portion subject to the copyright in the United States: Copyright (c) 2016 United States Government. All rights reserved. 
                        Copyright (c) 2016, Center for Internet Security. All rights reserved. The contents of this file are subject to the terms of the 
                        OVAL License located at https://oval.cisecurity.org/terms. See the OVAL License for the specific language governing permissions 
                        and limitations for use of this schema. When distributing copies of the OVAL Schema, this license header must be included.
                  </terms_of_use>
                  <sch:ns prefix="oval" uri="http://oval.cisecurity.org/XMLSchema/oval-common-6"/>
                  <sch:ns prefix="oval-def" uri="http://oval.cisecurity.org/XMLSchema/oval-definitions-6"/>
                  <sch:ns prefix="oval-coll" uri="http://oval.cisecurity.org/XMLSchema/oval-collections-6"/>
                  <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
            </xsd:appinfo>
      </xsd:annotation>

      <!-- =============================================================================== -->
      <!-- ================================  FAMILY TEST  ================================ -->
      <!-- =============================================================================== -->
      <xsd:element name="family_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The family_test element is used to check the family a certain system belongs to. This test basically allows the high level system types (window, unix, ios, etc.) to be tested. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a family_object and the optional state element specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>family_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">family_object</oval:collection>
                              <oval:state>family_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">family_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_famtst">
                              <sch:rule context="ind-def:family_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:family_object/@id"><sch:value-of select="../@id"/> - the object child element of a family_test must reference a family_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:family_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:family_state/@id"><sch:value-of select="../@id"/> - the state child element of a family_test must reference a family_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="family_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The family_state element contains a single entity that is used to check the family associated with the system. The family is a high-level classification of system types.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="family" type="ind-def:EntityStateFamilyType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>This element describes the high-level system OS type to test against. Please refer to the definition of the EntityFamilyType for more information about the possible values..</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ==============================  FILE HASH TEST  =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="filehash_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The file hash test is used to check a specific hash type associated with a specified file. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a filehash58_object and the optional state element specifies an expected hash value.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>filehash_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">filehash_object</oval:collection>
                              <oval:state>filehash_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">filehash_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_filehash_test">
                              <sch:rule context="ind-def:filehash_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:filehash_object/@id"><sch:value-of select="../@id"/> - the object child element of a filehash58_test must reference a filehash58_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:filehash_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:filehash_state/@id"><sch:value-of select="../@id"/> - the state child element of a filehash58_test must reference a filehash58_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="filehash_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The filehash_state element contains entities that are used to check the file path, name, hash_type, and hash associated with a specific file.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="filepath" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filepath entity specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The path entity specifies the directory component of the absolute path to a file on the machine.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename entity specifies the name of the file.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="hash_type" type="ind-def:EntityStateHashTypeType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The hash_type entity specifies the hash algorithm to use when collecting the hash for each of the specifed files.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="hash" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The hash entity specifies the result of applying the hash algorithm to the file.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="windows_view" type="ind-def:EntityStateWindowsViewType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.  This entity only applies to 64-bit Microsoft Windows operating systems.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =======================  ENVIRONMENT VARIABLE TEST  =========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="environmentvariable_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The environmentvariable_test element is used to check an environment variable found on the system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a environmentvariable_object and the optional state element specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>environmentvariable_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">environmentvariable_object</oval:collection>
                              <oval:state>environmentvariable_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">environmentvariable_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <oval:deprecated_info>
                              <oval:version>5.8</oval:version>
                              <oval:reason>Replaced by the processenvironment_test.</oval:reason>
                              <oval:comment>This object has been deprecated and may be removed in a future version of the language.</oval:comment>
                        </oval:deprecated_info>
                        <sch:pattern id="ind-def_environmentvariable_test_dep">
                              <sch:rule context="ind-def:environmentvariable_test">
                                    <sch:report test="true()">DEPRECATED TEST: <sch:value-of select="name()"/> ID: <sch:value-of select="@id"/></sch:report>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_envtst">
                              <sch:rule context="ind-def:environmentvariable_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:environmentvariable_object/@id"><sch:value-of select="../@id"/> - the object child element of an environmentvariable_test must reference a environmentvariable_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:environmentvariable_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:environmentvariable_state/@id"><sch:value-of select="../@id"/> - the state child element of an environmentvariable_test must reference a environmentvariable_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="environmentvariable_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The environmentvariable_state element contains two entities that are used to check the name of the specified environment variable and the value associated with it.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:deprecated_info>
                              <oval:version>5.8</oval:version>
                              <oval:reason>Replaced by the processenvironment_state.</oval:reason>
                              <oval:comment>This object has been deprecated and may be removed in a future version of the language.</oval:comment>
                        </oval:deprecated_info>
                        <sch:pattern id="ind-def_environmentvariable_state_dep">
                              <sch:rule context="ind-def:environmentvariable_state">
                                    <sch:report test="true()">DEPRECATED STATE: <sch:value-of select="name()"/> ID: <sch:value-of select="@id"/></sch:report>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>This element describes the name of an environment variable.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The actual value of the specified environment variable.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ==========================  PROCESS ENVIRONMENT TEST ========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="processenvironment_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The processenvironment_test element is used to check an environment variable for the specified process, which is identified by its process ID, on the system . It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a environmentvariable_object and the optional state element specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>processenvironment_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">processenvironment_object</oval:collection>
                              <oval:state>processenvironment_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">processenvironment_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_env58tst">
                              <sch:rule context="ind-def:processenvironment_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:processenvironment_object/@id"><sch:value-of select="../@id"/> - the object child element of an processenvironment_test must reference a processenvironment_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:processenvironment_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:processenvironment_state/@id"><sch:value-of select="../@id"/> - the state child element of an processenvironment_test must reference a processenvironment_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="processenvironment_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The processenvironment_state element contains three entities that are used to check the name of the specified environment variable, the process ID of the process from which the environment variable was retrieved, and the value associated with the environment variable.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="pid" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The process ID of the process from which the environment variable was retrieved.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>This element describes the name of an environment variable.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The actual value of the specified environment variable.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =================================  LDAP TEST  ================================= -->
      <!-- =============================================================================== -->
      <xsd:element name="ldap_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The LDAP test is used to check information about specific entries in an LDAP directory. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an ldap_object and the optional state element, ldap_state, specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>ldap_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">ldap_object</oval:collection>
                              <oval:state>ldap_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">ldap_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_ldaptst">
                              <sch:rule context="ind-def:ldap_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:ldap_object/@id"><sch:value-of select="../@id"/> - the object child element of an ldap_test must reference an ldap_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:ldap_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:ldap_state/@id"><sch:value-of select="../@id"/> - the state child element of an ldap_test must reference an ldap_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="ldap_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The ldap_state element defines the different information that can be used to evaluate the specified entries in an LDAP directory. An ldap_test will reference a specific instance of this state that defines the exact settings that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="suffix" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Each object in an LDAP directory exists under a certain suffix (also known as a naming context). A suffix is defined as a single object in the Directory Information Tree (DIT) with every object in the tree subordinate to it.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="relative_dn" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The relative_dn field is used to uniquely identify an object inside the specified suffix. It contains all of the parts of the object's distinguished name except those outlined by the suffix.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="attribute" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies a named value contained by the object.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="object_class" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The name of the class of which the object is an instance.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="ldaptype" type="ind-def:EntityStateLdaptypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the type of information that the specified attribute represents.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value" type="oval-def:EntityStateAnySimpleType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The actual value of the specified LDAP attribute.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===================================  SQL TEST  ================================ -->
      <!-- =============================================================================== -->
      <xsd:element name="sql_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The sql test is used to check information stored in a database. It is often the case that applications store configuration settings in a database as opposed to a file. This test has been designed to enable those settings to be tested. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a wmi_object and the optional state element specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>sql_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">sql_object</oval:collection>
                              <oval:state>sql_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">sql_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_sql_test">
                              <sch:rule context="ind-def:sql_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:sql_object/@id"><sch:value-of select="../@id"/> - the object child element of a sql_test must reference a sql_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:sql_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:sql_state/@id"><sch:value-of select="../@id"/> - the state child element of a sql_test must reference a sql_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sql_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The sql_state element contains two entities that are used to check the name of the specified field and the value associated with it.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="engine" type="ind-def:EntityStateEngineType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The engine entity defines a specific database engine.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="version" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The version entity defines a specific version of a given database engine.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="connection_string" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The connection_string entity defines a set of parameters that help identify the connection to the database.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sql" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>the sql entity defines a query used to identify the object(s) to test against.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="result" type="oval-def:EntityStateRecordType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The result entity specifies how to test objects in the result set of the specified SQL statement.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ind-def_sqlsteresult">
                                                            <sch:rule context="ind-def:sql_state/ind-def:result">
                                                                  <sch:assert test="@datatype='record'"><sch:value-of select="../@id"/> - datatype attribute for the result entity of a sql_state must be 'record'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                          <xsd:unique name="UniqueSqlResultFieldName">
                                                <xsd:selector xpath="./oval-def:field"/>
                                                <xsd:field xpath="@name"/>
                                          </xsd:unique>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ============================  TEXT FILE CONTENT TEST  ========================= -->
      <!-- =============================================================================== -->
      <xsd:element name="textfilecontent_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The textfilecontent_test element is used to check the contents of a text file (aka a configuration file) by looking at individual blocks of text. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a textfilecontent_object and the optional state element specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>textfilecontent_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">textfilecontent_object</oval:collection>
                              <oval:state>textfilecontent_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">textfilecontent_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_txt54tst">
                              <sch:rule context="ind-def:textfilecontent_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:textfilecontent_object/@id"><sch:value-of select="../@id"/> - the object child element of a textfilecontent_test must reference a textfilecontent_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:textfilecontent_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:textfilecontent_state/@id"><sch:value-of select="../@id"/> - the state child element of a textfilecontent_test must reference a textfilecontent_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="textfilecontent_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The textfilecontent_state element contains entities that are used to check the file path and name, as well as the text block in question and the value of the subexpressions.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="filepath" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the directory component of the absolute path to a file on the machine.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename entity represents the name of a file.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="pattern" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The pattern entity represents a regular expression that is used to define a block of text.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="instance" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The instance entity calls out a specific match of the pattern. This can only be a positive integer.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="win-def_tfc54_i">
                                                            <sch:rule context="win-def:textfilecontent_state/win-def:instance">
                                                                  <sch:assert test="string-length(.) = 0 or number(.) &lt; 1"><sch:value-of select="../@id"/> - the value of instance must be greater than one</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="text" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The text entity represents the block of text that matched the specified pattern.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="subexpression" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The subexpression entity represents a value to test against the subexpression in the specified pattern. If multiple subexpressions are specified in the pattern, this value is tested against all of them. For example, if the pattern abc(.*)mno(.*)xyp was supplied, and the state specifies a subexpression value of enabled, then the test would check that both (or at least one, none, etc. depending on the entity_check attribute) of the subexpressions have a value of enabled. </xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="windows_view" type="ind-def:EntityStateWindowsViewType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.  This entity only applies to 64-bit Microsoft Windows operating systems.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===============================  UNKNOWN TEST  ================================ -->
      <!-- =============================================================================== -->
      <xsd:element name="unknown_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>An unknown_test acts as a placeholder for tests whose implementation is unknown. This test always evaluates to a result of 'unknown'. Any information that is known about the test should be held in the notes child element that is available through the extension of the abstract test element. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. Note that for an unknown_test, the required check attribute that is part of the extended TestType should be ignored during evaluation and hence can be set to any valid value.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType"/>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===============================  VARIABLE TEST  =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="variable_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The variable test allows the value of a variable to be compared to a defined value. As an example one might use this test to validate that a variable being passed in from an external source falls within a specified range. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a variable_object and the optional state element specifies the value to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>variable_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">variable_object</oval:collection>
                              <oval:state>variable_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">variable_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_vattst">
                              <sch:rule context="ind-def:variable_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:variable_object/@id"><sch:value-of select="../@id"/> - the object child element of a variable_test must reference a variable_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:variable_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:variable_state/@id"><sch:value-of select="../@id"/> - the state child element of a variable_test must reference a variable_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="variable_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The variable_state element contains two entities that are used to check the var_ref of the specified varible and the value associated with it.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="var_ref" type="ind-def:EntityStateVariableRefType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The id of the variable.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ind-def_varstevar_ref">
                                                            <sch:rule context="ind-def:variable_state/ind-def:var_ref">
                                                                  <sch:assert test="not(@var_ref)"><sch:value-of select="../@id"/> - var_ref attribute for the var_ref entity of a variable_state is prohibited.</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                      <sch:pattern id="ind-def_varstevar_ref_exists">
                                                            <sch:rule context="ind-def:variable_state/ind-def:var_ref">
                                                                  <sch:let name="varId" value="."/>
                                                                  <sch:assert test="ancestor::oval-def:oval_definitions/oval-def:variables/*[@id =  $varId]"><sch:value-of select="../@id"/> - referenced variable <sch:value-of select="."/> not found. The var_ref entity must hold a variable id that exists in the document.</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The value of the variable.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===========================  XML FILE CONTENT TEST  =========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="xmlfilecontent_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The xmlfilecontent_test element is used to explore the contents of an xml file. This test allows specific pieces of an xml document specified using xpath to be tested. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a xmlfilecontent_object and the optional state element specifies the metadata to check.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>xmlfilecontent_test</oval:test>
                              <oval:collection target_namespace="http://oval.cisecurity.org/XMLSchema/oval-collection-6#independent">xmlfilecontent_object</oval:collection>
                              <oval:state>xmlfilecontent_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#independent">xmlfilecontent_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="ind-def_xmltst">
                              <sch:rule context="ind-def:xmlfilecontent_test/ind-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ind-coll:xmlfilecontent_object/@id"><sch:value-of select="../@id"/> - the object child element of a xmlfilecontent_test must reference a xmlfilecontent_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="ind-def:xmlfilecontent_test/ind-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ind-def:xmlfilecontent_state/@id"><sch:value-of select="../@id"/> - the state child element of a xmlfilecontent_test must reference a xmlfilecontent_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="xmlfilecontent_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The xmlfilecontent_state element contains entities that are used to check the file path and name, as well as the xpath used and the value of the this xpath.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="filepath" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the directory component of the absolute path to a file on the machine.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="xpath" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies an XPath 1.0 expression to evaluate against the XML file specified by the filename entity.  This XPath 1.0 expression must evaluate to a list of zero or more text values which will be accessible in OVAL via instances of the value_of entity.  Any results from evaluating the XPath 1.0 expression other than a list of text strings (e.g., a nodes set) is considered an error.  The intention is that the text values be drawn from instances of a single, uniquely named element or attribute.  However, an OVAL interpreter is not required to verify this, so the author should define the XPath expression carefully.  Note that "equals" is the only valid operator for the xpath entity.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value_of" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The value_of element checks the value(s) of the text node(s) or attribute(s) found.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="windows_view" type="ind-def:EntityStateWindowsViewType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.  This entity only applies to 64-bit Microsoft Windows operating systems.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =============================================================================== -->
      <!-- =============================================================================== -->
      <xsd:complexType name="EntityStateEngineType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateEngineType complex type defines a string entity value that is restricted to a set of enumerations. Each valid enumeration is a valid database engine. The empty string is also allowed to support empty elements associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="access">
                              <xsd:annotation>
                                    <xsd:documentation>The access value describes the Microsoft Access database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="db2">
                              <xsd:annotation>
                                    <xsd:documentation>The db2 value describes the IBM DB2 database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="cache">
                              <xsd:annotation>
                                    <xsd:documentation>The cache value describes the InterSystems Cache database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="firebird">
                              <xsd:annotation>
                                    <xsd:documentation>The firebird value describes the Firebird database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="firstsql">
                              <xsd:annotation>
                                    <xsd:documentation>The firstsql value describes the FirstSQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="foxpro">
                              <xsd:annotation>
                                    <xsd:documentation>The foxpro value describes the Microsoft FoxPro database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="informix">
                              <xsd:annotation>
                                    <xsd:documentation>The informix value describes the IBM Informix database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ingres">
                              <xsd:annotation>
                                    <xsd:documentation>The ingres value describes the Ingres database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="interbase">
                              <xsd:annotation>
                                    <xsd:documentation>The interbase value describes the Embarcadero Technologies InterBase database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="lightbase">
                              <xsd:annotation>
                                    <xsd:documentation>The lightbase value describes the Light Infocon LightBase database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="maxdb">
                              <xsd:annotation>
                                    <xsd:documentation>The maxdb value describes the SAP MaxDB database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="monetdb">
                              <xsd:annotation>
                                    <xsd:documentation>The monetdb value describes the MonetDB SQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="mimer">
                              <xsd:annotation>
                                    <xsd:documentation>The mimer value describes the Mimer SQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="mysql">
                              <xsd:annotation>
                                    <xsd:documentation>The mysql value describes the MySQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="oracle">
                              <xsd:annotation>
                                    <xsd:documentation>The oracle value describes the Oracle database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="paradox">
                              <xsd:annotation>
                                    <xsd:documentation>The paradox value describes the Paradox database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="pervasive">
                              <xsd:annotation>
                                    <xsd:documentation>The pervasive value describes the Pervasive PSQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="postgre">
                              <xsd:annotation>
                                    <xsd:documentation>The postgre value describes the PostgreSQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="sqlbase">
                              <xsd:annotation>
                                    <xsd:documentation>The sqlbase value describes the Unify SQLBase database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="sqlite">
                              <xsd:annotation>
                                    <xsd:documentation>The sqlite value describes the SQLite database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="sqlserver">
                              <xsd:annotation>
                                    <xsd:documentation>The sqlserver value describes the Microsoft SQL database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="sybase">
                              <xsd:annotation>
                                    <xsd:documentation>The sybase value describes the Sybase database engine.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="">
                              <xsd:annotation>
                                    <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateFamilyType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateFamilyType complex type defines a string entity value that is restricted to a set of enumerations. Each valid enumeration is a high-level family of system operating system. The empty string is also allowed to support empty elements associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="android">
                              <xsd:annotation>
                                    <xsd:documentation>The android value describes the Android mobile operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="apple_ios">
                              <xsd:annotation>
                                    <xsd:documentation>The apple_ios value describes the iOS mobile operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="asa">
                              <xsd:annotation>
                                    <xsd:documentation>The asa value describes the Cisco ASA security devices.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="catos">
                              <xsd:annotation>
                                    <xsd:documentation>The catos value describes the Cisco CatOS operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ios">
                              <xsd:annotation>
                                    <xsd:documentation>The ios value describes the Cisco IOS operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="iosxe">
                              <xsd:annotation>
                                    <xsd:documentation>The iosxe value describes the Cisco IOS-XE operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="junos">
                              <xsd:annotation>
                                    <xsd:documentation>The junos value describes the Juniper JunOS operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="macos">
                              <xsd:annotation>
                                    <xsd:documentation>The macos value describes the Mac operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="pixos">
                              <xsd:annotation>
                                    <xsd:documentation>The pixos value describes the Cisco PIX operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="undefined">
                              <xsd:annotation>
                                    <xsd:documentation>The undefined value is to be used when the desired family is not available.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="unix">
                              <xsd:annotation>
                                    <xsd:documentation>The unix value describes the UNIX operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="vmware_infrastructure">
                              <xsd:annotation>
                                    <xsd:documentation>The vmware_infrastructure value describes VMWare Infrastructure.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="windows">
                              <xsd:annotation>
                                    <xsd:documentation>The windows value describes the Microsoft Windows operating system.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="">
                              <xsd:annotation>
                                    <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateHashTypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateHashTypeType complex type restricts a string value to a specific set of values that specify the different hash algorithms that are supported. The empty string is also allowed to support empty elements associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="MD5">
                              <xsd:annotation>
                                    <xsd:documentation>The MD5 hash algorithm.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="SHA-1">
                              <xsd:annotation>
                                    <xsd:documentation>The SHA-1 hash algorithm.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="SHA-224">
                              <xsd:annotation>
                                    <xsd:documentation>The SHA-224 hash algorithm.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="SHA-256">
                              <xsd:annotation>
                                    <xsd:documentation>The SHA-256 hash algorithm.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="SHA-384">
                              <xsd:annotation>
                                    <xsd:documentation>The SHA-384 hash algorithm.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="SHA-512">
                              <xsd:annotation>
                                    <xsd:documentation>The SHA-512 hash algorithm.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="">
                              <xsd:annotation>
                                    <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateVariableRefType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateVariableRefType complex type defines a string state entity that has a valid OVAL variable id as the value. The empty string is also allowed to support empty elements associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:pattern value="(oval:[A-Za-z0-9_\-\.]+:var:[1-9][0-9]*){0,}"/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateLdaptypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateLdaptypeType complex type restricts a string value to a specific set of values that specify the different types of information that an ldap attribute can represent. The empty string is also allowed to support empty elements associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="LDAPTYPE_ACI_ITEM">
                            <xsd:annotation>
                                <xsd:documentation>ACI Item, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.1</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_ACCESS_POINT">
                            <xsd:annotation>
                                <xsd:documentation>Access Point, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.2</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_ATTRIBUTE_TYPE_DESCRIP_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Attribute Type Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.3</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_AUDIO">
                            <xsd:annotation>
                                <xsd:documentation>Audio, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.4</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_BINARY">
                            <xsd:annotation>
                                <xsd:documentation>Binary, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.5</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_BIT_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Bit String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.6</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_BOOLEAN">
                            <xsd:annotation>
                                <xsd:documentation>Boolean, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.7</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_CERTIFICATE">
                            <xsd:annotation>
                                <xsd:documentation>Certificate, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.8</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_CERTIFICATE_LIST">
                            <xsd:annotation>
                                <xsd:documentation>Certificate List, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.9</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_CERTIFICATE_PAIR">
                            <xsd:annotation>
                                <xsd:documentation>Certificate Pair, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.10</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_COUNTRY_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Country String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.11</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DN_STRING">
                            <xsd:annotation>
                                <xsd:documentation>DN, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.12</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DATA_QUALITY_SYNTAX">
                            <xsd:annotation>
                                <xsd:documentation>Data Quality Syntax, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.13</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DELIVERY_METHOD">
                            <xsd:annotation>
                                <xsd:documentation>Delivery Method, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.14</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DIRECTORY_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Directory String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.15</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DIR_CONTENT_RULE_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>DIT Content Rule Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.16</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DIT_STRUCTURE_RULE_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>DIT Structure Rule Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.17</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DL_SUBMIT_PERMISSION">
                            <xsd:annotation>
                                <xsd:documentation>DL Submit Permission, corresponding to OID Y  1.3.6.1.4.1.1466.115.121.1.18</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DSA_QUALITY_SYNTAX">
                            <xsd:annotation>
                                <xsd:documentation>DSA Quality Syntax, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.19</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_DSE_TYPE">
                            <xsd:annotation>
                                <xsd:documentation>DSE Type, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.20</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_ENHANCED_GUIDE">
                            <xsd:annotation>
                                <xsd:documentation>Enhanced Guide, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.21</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_FAX_TEL_NUMBER">
                            <xsd:annotation>
                                <xsd:documentation>Facsimile Telephone Number, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.22</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_FAX">
                            <xsd:annotation>
                                <xsd:documentation>Fax, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.23</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_GENERALIZED_TIME">
                            <xsd:annotation>
                                <xsd:documentation>Generalized Time, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.24</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_GUIDE">
                            <xsd:annotation>
                                <xsd:documentation>Guide, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.25</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_IA5_STRING">
                            <xsd:annotation>
                                <xsd:documentation>IA5 String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.26</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_INTEGER">
                            <xsd:annotation>
                                <xsd:documentation>INTEGER, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.27</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_JPEG">
                            <xsd:annotation>
                                <xsd:documentation>JPEG, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.28</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_LDAP_SYNTAX_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>LDAP Syntax Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.54</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_LDAP_SCHEMA_DEFINITION">
                            <xsd:annotation>
                                <xsd:documentation>LDAP Schema Definition, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.56</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_LDAP_SCHEMA_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>LDAP Schema Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.57</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MASTER_AND_SHADOW_ACCESS_POINTS">
                            <xsd:annotation>
                                <xsd:documentation>Master And Shadow Access Points, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.29</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MATCHING_RULE_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>Matching Rule Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.30</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MATCHING_RULE_USE_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>Matching Rule Use Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.31</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MAIL_PREFERENCE">
                            <xsd:annotation>
                                <xsd:documentation>Mail Preference, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.32</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MHS_OR_ADDRESS">
                            <xsd:annotation>
                                <xsd:documentation>MHS OR Address, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.33</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MODIFY_RIGHTS">
                            <xsd:annotation>
                                <xsd:documentation>Modify Rights, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.55</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_NAME_AND_OPTIONAL_UID">
                            <xsd:annotation>
                                <xsd:documentation>Name And Optional UID, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.34</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_NAME_FORM_DESCRIPTION">
                            <xsd:annotation>
                                <xsd:documentation>Name Form Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.35</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_NUMERIC_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Numeric String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.36</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_object_CLASS_DESCRIP_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Object Class Description, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.37</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_OCTET_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Octet String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.40</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_OID">
                            <xsd:annotation>
                                <xsd:documentation>OID, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.38</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_MAILBOX">
                            <xsd:annotation>
                                <xsd:documentation>Other Mailbox, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.39</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_POSTAL_ADDRESS">
                            <xsd:annotation>
                                <xsd:documentation>Postal Address, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.41</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_PROTOCOL_INFORMATION">
                            <xsd:annotation>
                                <xsd:documentation>Protocol Information, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.42</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_PRESENTATION_ADDRESS">
                            <xsd:annotation>
                                <xsd:documentation>Presentation Address, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.43</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_PRINTABLE_STRING">
                            <xsd:annotation>
                                <xsd:documentation>Printable String, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.44</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_SUBSTRING_ASSERTION">
                            <xsd:annotation>
                                <xsd:documentation>Substring Assertion, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.58</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_SUBTREE_SPECIFICATION">
                            <xsd:annotation>
                                <xsd:documentation>Subtree Specification, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.45</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_SUPPLIER_INFORMATION">
                            <xsd:annotation>
                                <xsd:documentation>Supplier Information, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.46</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_SUPPLIER_OR_CONSUMER">
                            <xsd:annotation>
                                <xsd:documentation>Supplier Or Consumer, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.47</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_SUPPLIER_AND_CONSUMER">
                            <xsd:annotation>
                                <xsd:documentation>Supplier And Consumer, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.48</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_SUPPORTED_ALGORITHM">
                            <xsd:annotation>
                                <xsd:documentation>Supported Algorithm, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.49</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_TELEPHONE_NUMBER">
                            <xsd:annotation>
                                <xsd:documentation>Telephone Number, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.50</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_TELEX_TERMINAL_ID">
                            <xsd:annotation>
                                <xsd:documentation>Teletex Terminal Identifier, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.51</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_TELEX_NUMBER">
                            <xsd:annotation>
                                <xsd:documentation>Telex Number, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.52</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_UTC_TIME">
                            <xsd:annotation>
                                <xsd:documentation>UTC Time, corresponding to OID 1.3.6.1.4.1.1466.115.121.1.53</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_TIMESTAMP">
                            <xsd:annotation>
                                <xsd:documentation>The data is of a time stamp in seconds.</xsd:documentation>
                                <xsd:appinfo>
                                    <oval:deprecated_info>
                                        <oval:version>5.7</oval:version>
                                        <oval:reason>This value was accidently carried over from the win-def:EntityStateAdstypeType as it was used as a template for the ind-def:EntityStateLdaptypeType.</oval:reason>
                                        <oval:comment>This value has been deprecated and will be removed in version 6.0 of the language.</oval:comment>
                                    </oval:deprecated_info>
                                    <sch:pattern id="ind-def_ldaptype_timestamp_value_dep">
                                        <sch:rule context="oval-def:oval_definitions/oval-def:states/ind-def:ldap_state/ind-def:ldaptype|oval-def:oval_definitions/oval-def:states/ind-def:ldap57_state/ind-def:ldaptype">
                                            <sch:report test=".='LDAPTYPE_TIMESTAMP'">
                                                                    DEPRECATED ELEMENT VALUE IN: ldap_state ELEMENT VALUE: <sch:value-of select="."/>
                                                              </sch:report>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="LDAPTYPE_EMAIL">
                            <xsd:annotation>
                                <xsd:documentation>The data is of an e-mail message.</xsd:documentation>
                                <xsd:appinfo>
                                    <oval:deprecated_info>
                                        <oval:version>5.7</oval:version>
                                        <oval:reason>This value was accidently carried over from the win-def:EntityStateAdstypeType as it was used as a template for the ind-def:EntityStateLdaptypeType.</oval:reason>
                                        <oval:comment>This value has been deprecated and will be removed in version 6.0 of the language.</oval:comment>
                                    </oval:deprecated_info>
                                    <sch:pattern id="ind-def_ldaptype_email_value_dep">
                                        <sch:rule context="oval-def:oval_definitions/oval-def:states/ind-def:ldap_state/ind-def:ldaptype|oval-def:oval_definitions/oval-def:states/ind-def:ldap57_state/ind-def:ldaptype">
                                            <sch:report test=".='LDAPTYPE_EMAIL'">
                                                                    DEPRECATED ELEMENT VALUE IN: ldap_state ELEMENT VALUE: <sch:value-of select="."/>
                                                              </sch:report>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="">
                            <xsd:annotation>
                                <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:enumeration>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateWindowsViewType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateWindowsViewType restricts a string value to a specific set of values: 32-bit and 64-bit. These values describe the different values possible for the windows view behavior.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="32_bit">
                              <xsd:annotation>
                                    <xsd:documentation>Indicates the 32_bit windows view.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="64_bit">
                              <xsd:annotation>
                                    <xsd:documentation>Indicates the 64_bit windows view.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="">
                              <xsd:annotation>
                                    <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
</xsd:schema>
